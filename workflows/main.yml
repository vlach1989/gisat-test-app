name: ci

on:
  push:
    branches:
      - 'main'
      - 'dev'
    tags:
      - '*'

env:
  CI: false

jobs:
  check:
    runs-on: ubuntu-latest
    outputs:
      DOCKER_LABEL: ${{ steps.convert-repository-name.outputs.DOCKER_LABEL }}
    steps:
      - 
        name: 'Convert repository name to docker hub repository name'
        id: convert-repository-name
        run: |
          echo "::set-output name=DOCKER_LABEL::$(sed 's/^[[:upper:]]/\L&/;s/[[:upper:]]/\L_&/g' <<< '${{ github.event.repository.name }}')"
      - 
        name: 'Check if docker repository exists'
        run: |
          curl --location --fail --header "Authorization: JWT $(curl --location --header "Content-type: application/json" --request POST --data '{"username": "${{ secrets.DOCKERHUB_USERNAME }}", "password": "${{ secrets.DOCKERHUB_TOKEN }}"}' https://hub.docker.com/v2/users/login | jq -r '.token')" https://hub.docker.com/v2/repositories/gisat/${{ steps.convert-repository-name.outputs.DOCKER_LABEL }}

  test:
    runs-on: ubuntu-latest
    steps:
      - 
        name: 'Run application tests'
        run: |
          echo "There are no tests for now."

  build:
    runs-on: ubuntu-latest
    needs: [check, test]
    steps:
      - 
        name: 'Checkout'
        uses: actions/checkout@v2
      - 
        name: 'Install dependencies'
        run: |
          npm install
      - 
        name: 'Build application'
        run: |
          npm run build
      - 
        name: 'Get docker image metadata'
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: gisat/${{ needs.check.outputs.DOCKER_LABEL }}
          tags: |
            type=raw,value=latest,enable=${{ endsWith(GitHub.ref, 'main') }}
            type=raw,value=dev,enable=${{ endsWith(GitHub.ref, 'dev') }}
            type=ref,event=tag
          flavor: |
            latest=false
      - 
        name: 'Login to DockerHub'
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - 
        name: 'Build and push'
        uses: docker/build-push-action@v2
        if: ${{ success() }}
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy:
    runs-on: ubuntu-latest
    needs: [check, test, build]
    steps:
      -
        name: "Deploy application on remote server"
        if: github.ref == 'refs/heads/main'
        run: |
          curl --location --fail "APP-TEMPLATE-REPLACE-PRODUCTION-DEPLOY-URL"
      -
        name: "Deploy application on remote server"
        if: github.ref == 'refs/heads/dev'
        run: |
          curl --location --fail "APP-TEMPLATE-REPLACE-DEVELOPMENT-DEPLOY-URL"